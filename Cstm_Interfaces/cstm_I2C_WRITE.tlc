%% File : cstm_I2C_WRITE.tlc
%% Created : Thu May 28 01:53:15 2020
%%
%% Description: 
%%   Simulink Coder wrapper functions interface generated for 
%%   S-function "cstm_I2C_WRITE.c".
%%
%%         File generated by S-function Builder Block
%%
%%   For more information on using the Target Language with the 
%%   Simulink Coder, see the Target Language Compiler manual
%%   (under Simulink Coder) in the "Inlining S-Functions"
%%   chapter under the section and subsection:
%%     "Writing Block Target Files to Inline S-Functions",
%%        "Function-Based or Wrappered Code".
%%
%implements  cstm_I2C_WRITE "C"
%% Function: BlockTypeSetup ===================================================
%%
%% Purpose:
%%      Set up external references for wrapper functions in the 
%%      generated code.
%%
%function BlockTypeSetup(block, system) Output
  %openfile externs

    #ifdef __cplusplus
    extern "C" {
    #endif

    extern void cstm_I2C_WRITE_Start_wrapper(const uint8_T *addr, const int_T p_width0,
			const uint8_T *adapter_nr, const int_T p_width1,
			const uint8_T *byte_order, const int_T p_width2,
			const uint8_T *send_register, const int_T p_width3,
			const uint8_T *slave_register, const int_T p_width4,
			const uint8_T *send_nack, const int_T p_width5,
			const uint8_T *remove_stop, const int_T p_width6);

    extern void cstm_I2C_WRITE_Outputs_wrapper(const uint8_T *InputMessage,
			int32_T *ErrorStatus,
			const uint8_T *addr, const int_T p_width0,
			const uint8_T *adapter_nr, const int_T p_width1,
			const uint8_T *byte_order, const int_T p_width2,
			const uint8_T *send_register, const int_T p_width3,
			const uint8_T *slave_register, const int_T p_width4,
			const uint8_T *send_nack, const int_T p_width5,
			const uint8_T *remove_stop, const int_T p_width6,
			const int_T u_width);

    extern void cstm_I2C_WRITE_Terminate_wrapper(const uint8_T *addr, const int_T p_width0,
			const uint8_T *adapter_nr, const int_T p_width1,
			const uint8_T *byte_order, const int_T p_width2,
			const uint8_T *send_register, const int_T p_width3,
			const uint8_T *slave_register, const int_T p_width4,
			const uint8_T *send_nack, const int_T p_width5,
			const uint8_T *remove_stop, const int_T p_width6);

    #ifdef __cplusplus
    }
    #endif
  %closefile externs
  %<LibCacheExtern(externs)>
  %%
%endfunction


%% Function: Outputs ==========================================================
%%
%% Purpose:
%%      Code generation rules for mdlOutputs function.
%%
%function Outputs(block, system) Output
  %%
  %assign pu0 = LibBlockInputSignalAddr(0, "", "", 0)
  %assign pu_width = LibBlockInputSignalWidth(0)
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]
  %if (param_width1) > 1
    %assign pp1 = LibBlockMatrixParameterBaseAddr(P1)
  %else
    %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
  %endif
  %assign nelements2 = LibBlockParameterSize(P2)
  %assign param_width2 = nelements2[0] * nelements2[1]
  %if (param_width2) > 1
    %assign pp2 = LibBlockMatrixParameterBaseAddr(P2)
  %else
    %assign pp2 = LibBlockParameterAddr(P2, "", "", 0)
  %endif
  %assign nelements3 = LibBlockParameterSize(P3)
  %assign param_width3 = nelements3[0] * nelements3[1]
  %if (param_width3) > 1
    %assign pp3 = LibBlockMatrixParameterBaseAddr(P3)
  %else
    %assign pp3 = LibBlockParameterAddr(P3, "", "", 0)
  %endif
  %assign nelements4 = LibBlockParameterSize(P4)
  %assign param_width4 = nelements4[0] * nelements4[1]
  %if (param_width4) > 1
    %assign pp4 = LibBlockMatrixParameterBaseAddr(P4)
  %else
    %assign pp4 = LibBlockParameterAddr(P4, "", "", 0)
  %endif
  %assign nelements5 = LibBlockParameterSize(P5)
  %assign param_width5 = nelements5[0] * nelements5[1]
  %if (param_width5) > 1
    %assign pp5 = LibBlockMatrixParameterBaseAddr(P5)
  %else
    %assign pp5 = LibBlockParameterAddr(P5, "", "", 0)
  %endif
  %assign nelements6 = LibBlockParameterSize(P6)
  %assign param_width6 = nelements6[0] * nelements6[1]
  %if (param_width6) > 1
    %assign pp6 = LibBlockMatrixParameterBaseAddr(P6)
  %else
    %assign pp6 = LibBlockParameterAddr(P6, "", "", 0)
  %endif
  %assign nelements7 = LibBlockParameterSize(P7)
  %assign param_width7 = nelements7[0] * nelements7[1]
  %if (param_width7) > 1
    %assign pp7 = LibBlockMatrixParameterBaseAddr(P7)
  %else
    %assign pp7 = LibBlockParameterAddr(P7, "", "", 0)
  %endif
  cstm_I2C_WRITE_Outputs_wrapper(%<pu0>, %<py0>, %<pp1>, %<param_width1>, %<pp2>, %<param_width2>, %<pp3>, %<param_width3>, %<pp4>, %<param_width4>, %<pp5>, %<param_width5>, %<pp6>, %<param_width6>, %<pp7>, %<param_width7>, %<pu_width>);
  %%
%endfunction


%% [EOF] cstm_I2C_WRITE.tlc

